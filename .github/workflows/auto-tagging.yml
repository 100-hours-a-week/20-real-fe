name: Auto Version Tagging

on:
  push:
    branches:
      - main
      - dev
      - hotfix/*


jobs:
    tagging:
        runs-on: ubuntu-latest
        permissions:
            contents: write

        steps:
            # 1. 코드 체크아웃
            - name: Checkout code
              uses: actions/checkout@v3

            # 3. 병합된 커밋 ID 가져오기
            - name: Get Merged Commit SHA
              id: merged_commit
              run: |
                  MERGE_COMMIT=$(git rev-parse HEAD)
                  echo "MERGE_COMMIT=${MERGE_COMMIT}" >> $GITHUB_ENV

            # 4. 버전 태그 생성
            - name: Generate Version Tag
              id: tag
              env:
                  TAG_PREFIX: "v"
              run: |
                  # 최신 태그 가져오기
                  LATEST_TAG=$(git tag --list "v*" | sort -V | tail -n 1 || echo "${TAG_PREFIX}0.0.0")
                  echo "Latest Tag: ${LATEST_TAG}"

                  # 메인 브랜치의 최신 태그 확인
                  MAIN_LATEST_TAG=$(git ls-remote --tags origin | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+" | sort -V | tail -n 1 || echo "v0.0.0")
                  echo "Latest Main Tag: ${MAIN_LATEST_TAG}"

                  # 버전 파싱
                  LATEST_VERSION=${LATEST_TAG#$TAG_PREFIX}
                  MAIN_VERSION=${MAIN_LATEST_TAG#$TAG_PREFIX}
                  IFS='.' read -ra MAIN_PARTS <<< "$MAIN_VERSION"
                  MAIN_MAJOR=${MAIN_PARTS[0]}
                  MAIN_MINOR=${MAIN_PARTS[1]}
                  MAIN_PATCH=${MAIN_PARTS[2]}

                  IFS='.' read -ra PARTS <<< "$LATEST_VERSION"
                  MAJOR=${PARTS[0]}
                  MINOR=${PARTS[1]}
                  PATCH=${PARTS[2]}

                  # 브랜치 확인
                  if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
                    # Main: 메이저 버전 증가
                    MAJOR=$((MAIN_MAJOR+1))
                    MINOR=0
                    PATCH=0
                    ENV="prod"
                  elif [[ "${GITHUB_REF}" == "refs/heads/dev" ]]; then
                    # 메이저 동기화 (dev가 main보다 낮으면 메인 기준으로 동기화)
                    if [[ "${MAJOR}" -lt "${MAIN_MAJOR}" || ( "${MAJOR}" == "${MAIN_MAJOR}" && "${MINOR}" -lt "${MAIN_MINOR}" ) ]]; then
                      MAJOR="${MAIN_MAJOR}"
                      MINOR=$((MAIN_MINOR+1))
                      PATCH=0
                    else
                      MINOR=$((MINOR+1))
                      PATCH=0
                    fi
                    ENV="dev"
                  elif [[ "${GITHUB_REF}" =~ ^refs/heads/hotfix/ ]]; then
                    # Hotfix: Patch만 증가
                    MAJOR="${MAIN_MAJOR}"
                    MINOR="${MAIN_MINOR}"
                    PATCH=$((MAIN_PATCH+1))
                    ENV="hotfix"
                  else
                    echo "Unsupported branch, skipping tag."
                    exit 0
                  fi

                  # 최종 버전
                  NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                  NEW_TAG="${TAG_PREFIX}${NEW_VERSION}"
                  echo "New Tag: ${NEW_TAG}"

                  # 중복 태그 검사
                  if git ls-remote --tags origin | grep -q "refs/tags/${NEW_TAG}"; then
                    echo "Tag ${NEW_TAG} already exists. Skipping push."
                    exit 0
                  fi

                  # 병합된 커밋에 태그 추가
                  MERGE_COMMIT=${MERGE_COMMIT}
                  echo "Tagging commit: ${MERGE_COMMIT}"

                  git config user.name "github-actions"
                  git config user.email "github-actions@github.com"

                  git tag "${NEW_TAG}" "${MERGE_COMMIT}"
                  git push origin "refs/tags/${NEW_TAG}"

                  # 태그 정보 저장
                  echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
                  echo "ENV=${ENV}" >> $GITHUB_ENV