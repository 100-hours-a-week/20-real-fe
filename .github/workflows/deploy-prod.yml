name: Prod Frontend CI/CD Pipeline

on:
    push:
        branches:
            main
env:
    ENV: production

jobs:
  lint_integration_build_test:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache pnpm
        uses: actions/cache@v3
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-pnpm-cache-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-cache-
            
      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint Test
        run: pnpm run lint

      #- name: Integration Test 
        # if: github.ref == 'refs/heads/main' 
        #run: pnpm cypress:run

      - name: Build
        run: pnpm run build

  storybook_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Cache pnpm
        uses: actions/cache@v3
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-pnpm-cache-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-cache-

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Storybook Build Test
        run: pnpm run build-storybook

      
  chromatic_publish:
    runs-on: ubuntu-latest
    needs : storybook_test
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Chromatic Publish
        id: publish_chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          buildScriptName: build-storybook
          onlyChanged: true

  deploy:
    runs-on: ubuntu-latest
    needs : [lint_integration_build_test, chromatic_publish]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set variables
        run: |
          TAG=$(git describe --tags --abbrev=0)
          SHA=$(git rev-parse --short=6 HEAD)
          echo "IMAGE_TAG=${ENV}-${TAG}-${SHA}" >> $GITHUB_ENV
          echo "S3_KEY=deploy-${ENV}-${TAG}-${SHA}.zip" >> $GITHUB_ENV
          echo "DEPLOYMENT_GROUP=${{ secrets.DEPLOYMENT_GROUP_PROD }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
             
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2


      - name: Inject variables into env.development
        run: |
          NEXT_PUBLIC_API_URL=$(aws ssm get-parameter --name "/next/prod/NEXT_PUBLIC_API_URL" --with-decryption --region ${{ secrets.AWS_REGION }} --query "Parameter.Value" --output text)
          NEXT_PUBLIC_SENTRY_DSN=$(aws ssm get-parameter --name "/next/prod/NEXT_PUBLIC_SENTRY_DSN" --with-decryption --region ${{ secrets.AWS_REGION }} --query "Parameter.Value" --output text)
          SENTRY_DSN=$(aws ssm get-parameter --name "/next/prod/SENTRY_DSN" --with-decryption --region ${{ secrets.AWS_REGION }} --query "Parameter.Value" --output text)
          NEXT_PUBLIC_WS_ADDRESS=$(aws ssm get-parameter --name "/next/prod/NEXT_PUBLIC_WS_ADDRESS" --with-decryption --region ${{ secrets.AWS_REGION }} --query "Parameter.Value" --output text)
          SENTRY_AUTH_TOKEN=$(aws ssm get-parameter --name "/next/prod/SENTRY_AUTH_TOKEN" --with-decryption --region ${{ secrets.AWS_REGION }} --query "Parameter.Value" --output text)
          
          sed -i "s|<NEXT_PUBLIC_API_URL>|$NEXT_PUBLIC_API_URL|g" .env.production
          sed -i "s|<NEXT_PUBLIC_SENTRY_DSN>|$NEXT_PUBLIC_SENTRY_DSN|g" .env.production
          sed -i "s|<SENTRY_DSN>|$SENTRY_DSN|g" .env.production
          sed -i "s|<NEXT_PUBLIC_WS_ADDRESS>|$NEXT_PUBLIC_WS_ADDRESS|g" .env.production
          sed -i "s|<SENTRY_AUTH_TOKEN>|$SENTRY_AUTH_TOKEN|g" .env.production
          
      - name: Build & Push image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker tag ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Clone GitOps Repository
        uses: actions/checkout@v3
        with:
          repository: 100-hours-a-week/20-real-gitops
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops

      - name: Update image tag in values-prod.yaml
        run: |
          cd gitops/env/prod/next
          yq e '.image.tag = "${{ env.IMAGE_TAG }}"' -i values-prod.yaml

      - name: Commit & Push changes
        run: |
          cd gitops
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add env/prod/next/values-prod.yaml
          git commit -m "chore: Update next-prod image tag to $IMAGE_TAG"
          git push origin main
          
      - name: Discord Notify
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          STATUS=${{ job.status }}
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          MESSAGE="üîî CI/CD Í≤∞Í≥º: **${STATUS}**\nüì¶ Repo: \`${{ github.repository }}\`\nüîÅ Branch: \`${{ github.ref_name }}\`"

          if [ "$STATUS" != "success" ]; then
            MESSAGE="${MESSAGE}\n‚ùå [Ïã§Ìå® Î°úÍ∑∏ Î≥¥Îü¨ Í∞ÄÍ∏∞](${RUN_URL})"
          fi

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"${MESSAGE}\"}" \
               $DISCORD_WEBHOOK
